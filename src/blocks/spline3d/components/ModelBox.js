/**
 *
 * ModelBox Component.
 *
 */

// Import wp dependencies
const { Component } = wp.element;
import { __ } from '@wordpress/i18n';
import Spline from '@splinetool/react-spline';
// Import blpge dependencies
const {
	gspb_spacing_cssGen,
	aos_animation_cssGen,
	gspb_position_cssGen,
	gspb_csstransform_cssGen,
	gspb_responsive_cssGen,
	gspb_background_cssGen,
	gspb_Css_Final
} = gspblib.utilities;
const { gspb_cssGen } = gspblib.helpers;
const { AnimationRenderProps } = gspblib.collections;

export default class ModelBox extends Component {
	constructor(props) {
		super(...arguments);
	}

	render() {
		const {
			attributes: {
				id,
				threecanvwidth,
				threecanvheight,
				threecanvheightUnit,
				threecanvwidthUnit,
				url,
				td_load_iter,
				spacing,
				background,
				responsive,
				csstransform,
				animation,
				position,
			},
			className,
			clientId
		} = this.props;

		let modelBoxId = `gspbsplineBox-id-${id}`;

		// for styles applied by the user
		let css_selector_by_user = `#${modelBoxId}`;
		let css_wrapper = css_selector_by_user + ' model-viewer';

		// we should keep className generated by Gutenberg
		let modelBoxClassName = `gspb_splineBox gs-spline-model ${modelBoxId} ${className}`;


		// Final CSS for the block
		let final_css = `body.gspb-bodyfront ${css_selector_by_user} canvas{width:100%; height:100%;display: block;}`;

		final_css = gspb_cssGen(
			css_selector_by_user,
			['width'],
			[
				[
					[threecanvwidth[0] ? threecanvwidth[0] + threecanvwidthUnit[0] : null],
					[threecanvwidth[1] ? threecanvwidth[1] + threecanvwidthUnit[1] : null],
					[threecanvwidth[2] ? threecanvwidth[2] + threecanvwidthUnit[2] : null],
					[threecanvwidth[3] ? threecanvwidth[3] + threecanvwidthUnit[3] : null],
				],
			],
			final_css,
			false
		);
		final_css = gspb_cssGen(
			css_selector_by_user,
			['height'],
			[
				[
					[threecanvheight[0] ? threecanvheight[0] + threecanvheightUnit[0] : null],
					[threecanvheight[1] ? threecanvheight[1] + threecanvheightUnit[1] : null],
					[threecanvheight[2] ? threecanvheight[2] + threecanvheightUnit[2] : null],
					[threecanvheight[3] ? threecanvheight[3] + threecanvheightUnit[3] : null],
				],
			],
			final_css,
			false
		);

		// spacing
		final_css = gspb_spacing_cssGen(
			spacing,
			css_wrapper,
			final_css
		);

		// background
		final_css = gspb_background_cssGen(
			background,
			css_wrapper,
			final_css
		);

		// Animation
		final_css = aos_animation_cssGen(
			animation,
			css_selector_by_user,
			final_css
		);

		// Responsive classes
		final_css = gspb_responsive_cssGen(
			responsive,
			css_selector_by_user,
			final_css,
		);

		// Position
		final_css = gspb_position_cssGen(
			position,
			'body.gspb-bodyfront ' + css_selector_by_user,
			final_css,
		);

		// Css transform
		final_css = gspb_csstransform_cssGen(
			csstransform,
			css_selector_by_user,
			final_css,
			animation
		);

		//Render Animation Properties
		let AnimationProps = {};
		AnimationProps = AnimationRenderProps(animation);

		// Get The Stored CSS
		gspb_Css_Final(id, final_css, this.props);
		let editor_css = final_css;
		// Position
		editor_css = gspb_position_cssGen(
			position,
			'#block-' + clientId,
			editor_css,
		);

		return (
			<>
				<div
					id={modelBoxId}
					className={modelBoxClassName}
					style={{ display: 'flex' }}
					{...AnimationProps}
				>
					<Spline scene={url} />

				</div>

				{this.props.editor ? (
					<style
						dangerouslySetInnerHTML={{
							__html: editor_css,
						}}
					/>
				) : null}
			</>
		);
	}
}
